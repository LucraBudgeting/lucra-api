datasource db {
    provider = "postgresql"
    url      = env("DIRECT_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model SeedHash {
    id          String   @id @unique @default(cuid())
    hash        String
    dateCreated DateTime @default(now())

    @@index([hash], name: "seed_hash_index")
}

model User {
    id          String     @id @unique @default(cuid())
    addressId   String?
    username    String?    @unique
    email       String     @unique
    name        String     @default("User")
    status      UserStatus @default(Active_Demo)
    country     Country    @default(USA)
    phoneNumber String?

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    address             Address?              @relation(fields: [addressId], references: [id], onDelete: Cascade)
    userBilling         UserBilling?
    userAuth            UserAuth[]
    userSession         UserSession[]
    userPreferences     UserPreferences[]
    userOnboardingStage UserOnboardingStage[]
    budgetCategory      BudgetCategory[]
    transaction         Transaction[]
    rule                Rule[]
    accountAccess       AccountAccess[]
}

model UserAuth {
    id           String  @id @unique @default(cuid())
    userId       String  @unique
    passwordHash String?

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
    id          String          @id @unique @default(cuid())
    userId      String          @unique
    currency    IsoCurrencyCode @default(USD)
    language    Language        @default(English)
    theme       String?
    autoRefresh Boolean         @default(false)

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBilling {
    id               String          @id @unique @default(cuid())
    userId           String          @unique
    billingPlatform  BillingPlatform
    appleReceipt     String? // Apple App Store specific
    googleOrderId    String? // Google Play Store specific
    stripeCustomerId String? // Stripe specific
    amount           Float
    currency         String
    status           BillingStatus   @default(PENDING)
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([billingPlatform])
}

model UserOnboardingStage {
    id                         String  @id @unique @default(cuid())
    userId                     String  @unique
    isBillingConnected         Boolean @default(false)
    hasBankingAccountConnected Boolean @default(false)
    hasCreatedBudget           Boolean @default(false)

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSession {
    id     String @id @unique @default(cuid())
    userId String @unique

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    userSessionAccess UserSessionAccess[]
}

model UserSessionAccess {
    id               String @id @unique @default(cuid())
    sessionId        String
    deviceType       String
    operatingSystem  String
    sessionIpAddress String

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    userSession UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@index([sessionId], name: "user_session_access_session_id_index")
}

model AccountAccess {
    id             String          @id @unique @default(cuid())
    userId         String
    accessToken    String
    provider       FinancialVendor @default(Plaid)
    providerItemId String

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    account Account[]

    @@index([userId], name: "account_access_user_id_index")
    @@index([providerItemId], name: "account_access_provider_item_id_index")
}

model Account {
    id                          String       @id @unique @default(cuid())
    accessAccountId             String
    providerAccountId           String
    institutionDisplayName      String // account name
    institutionOfficialName     String?
    institutionId               String?
    latestTransactionSyncCursor String?
    type                        AccountTypes @default(Other)
    subType                     String?
    mask                        String?      @default("0000")
    bankInstitutionId           String?

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    accessToken     AccountAccess    @relation(fields: [accessAccountId], references: [id], onDelete: Cascade)
    bankInstitution BankInstitution? @relation(fields: [bankInstitutionId], references: [id])

    accountBalance AccountBalance[]
    transaction    Transaction[]

    @@index([accessAccountId], name: "account_access_account_id_index")
    @@index([providerAccountId], name: "account_provider_account_id_index")
}

model Transaction {
    id                      String          @id @unique @default(cuid())
    userId                  String
    accountId               String
    amount                  Decimal
    date                    DateTime        @default(now())
    isoCurrencyCode         IsoCurrencyCode @default(USD)
    merchantName            String?
    name                    String?
    pending                 Boolean         @default(false)
    isExcludedFromBudget    Boolean         @default(false)
    paymentChannel          PaymentChannel  @default(Other)
    addressId               String?
    budgetCategoryId        String?
    categoryConfidenceLevel String?
    categoryPrimary         String?
    categoryDetailed        String?

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    account  Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
    address  Address?        @relation(fields: [addressId], references: [id], onDelete: Cascade)
    category BudgetCategory? @relation(fields: [budgetCategoryId], references: [id], onDelete: SetNull)

    @@index([userId], name: "transaction_user_id_index")
    @@index([accountId], name: "transaction_account_id_index")
    @@index([budgetCategoryId], name: "transaction_category_id_index")
    @@index([date], name: "transaction_date_index")
}

model AccountBalance {
    id          String          @id @unique @default(cuid())
    accountId   String
    available   Decimal
    current     Decimal
    limit       Decimal?
    isoCurrency IsoCurrencyCode @default(USD)
    lastUpdated DateTime

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

    @@index([accountId], name: "account_balance_account_id_index")
}

model BankInstitution {
    id            String  @id @unique @default(cuid())
    institutionId String?
    name          String?
    website       String?
    primaryColor  String?
    logo          String?
    country       Country @default(USA)

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    account Account[]
}

model BudgetCategory {
    id              String             @id @unique @default(cuid())
    userId          String
    label           String
    emoji           String             @default("ðŸ’¸")
    color           String?
    budgetFrequency BudgetFrequency    @default(Monthly)
    budgetType      BudgetCategoryType @default(Debit)
    amount          Decimal            @default(0)
    isActive        Boolean            @default(true)
    categoryStatus  CategoryStatus     @default(Active)

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    Transaction Transaction[]

    @@index([userId], name: "budget_category_user_id_index")
}

model Address {
    id         String  @id @unique @default(cuid())
    street1    String
    street2    String?
    city       String?
    postalCode String?
    country    Country @default(USA)
    lat        String?
    lng        String?

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    user        User[]
    Transaction Transaction[]
}

model Rule {
    id          String     @id @unique @default(cuid())
    userId      String
    name        String
    description String?
    conditions  Json
    isActive    Boolean    @default(true)
    model       RuleModels @default(Transaction)

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], name: "transaction_rule_user_id_index")
}

// If a full DB reset needs to happen, you will need to delete the stored data types
enum UserStatus {
    Active_Paid
    Suspended
    InActive
    Deleted
    Active_Demo
    Onboarding_UnPaid
    Onboarding_Paid
}

enum RuleModels {
    Transaction
}

enum Country {
    USA
    Canada
}

enum CategoryStatus {
    Ignore
    Active
}

enum BudgetFrequency {
    Monthly
    Weekly
    Daily
}

enum BudgetCategoryType {
    Debit
    Credit
    Transfer
}

enum IsoCurrencyCode {
    USD
}

enum PaymentChannel {
    InStore
    Online
    Other
}

enum AccountTypes {
    Checking
    Savings
    CreditCard
    Loan
    Investment
    Mortgage
    Other
}

enum Language {
    English
}

enum FinancialVendor {
    Plaid
}

enum BillingPlatform {
    APPLE
    GOOGLE
    STRIPE
}

enum BillingStatus {
    PENDING
    COMPLETED
    FAILED
}
