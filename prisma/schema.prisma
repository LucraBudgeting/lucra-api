datasource db {
    provider = "postgresql"
    url      = env("DIRECT_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model SeedHash {
    id          String   @id @unique @default(cuid())
    hash        String
    dateCreated DateTime @default(now())

    @@index([hash], name: "seed_hash_index")
}

model User {
    id          String     @id @unique @default(cuid())
    addressId   String?
    username    String     @unique
    email       String     @unique
    lastName    String?
    status      UserStatus @default(Active_Demo)
    country     Country    @default(USA)
    firstName   String
    phoneNumber String?

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    Address             Address?              @relation(fields: [addressId], references: [id], onDelete: Cascade)
    UserAuth            UserAuth[]
    UserSession         UserSession[]
    TransactionCategory TransactionCategory[]
    UserPreferences     UserPreferences[]
    PlaidAccountAccess  PlaidAccountAccess[]

    @@index([email], name: "user_email_index")
    @@index([username], name: "user_username_index")
}

model UserAuth {
    id           String  @id @unique @default(cuid())
    userId       String
    passwordHash String?

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    User User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], name: "user_auth_user_id_index")
}

model UserPreferences {
    id          String          @id @unique @default(cuid())
    userId      String
    currency    IsoCurrencyCode @default(USD)
    language    Language        @default(English)
    theme       String?
    autoRefresh Boolean         @default(false)

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    User User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], name: "user_preferences_user_id_index")
}

model UserSession {
    id     String @id @unique @default(cuid())
    userId String

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    UserSessionAccess UserSessionAccess[]

    @@index([userId], name: "user_session_user_id_index")
}

model UserSessionAccess {
    id               String @id @unique @default(cuid())
    sessionId        String
    deviceType       String
    operatingSystem  String
    sessionIpAddress String

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    UserSession UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@index([sessionId], name: "user_session_access_session_id_index")
}

model PlaidAccountAccess {
    id          String @id @unique @default(cuid())
    userId      String
    accessToken String

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    PlaidAccount PlaidAccount[]
}

model PlaidAccount {
    id                      String       @id @unique @default(cuid())
    accessAccountId         String
    accountId               String
    institutionDisplayName  String
    institutionOfficialName String?
    institutionId           String?
    type                    AccountTypes @default(Other)
    subType                 String?
    mask                    String?      @default("0000")

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    AccessToken PlaidAccountAccess @relation(fields: [accessAccountId], references: [id], onDelete: Cascade)

    PlaidAccountBalance PlaidAccountBalance[]
    PlaidTransaction    PlaidTransaction[]

    @@index([accountId], name: "plaid_account_account_id_index")
}

model PlaidAccountBalance {
    id               String          @id @unique @default(cuid())
    accountId        String
    available        Decimal
    current          Decimal
    limit            Decimal?
    isoCurrency      IsoCurrencyCode @default(USD)
    plaidLastUpdated DateTime

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    Account PlaidAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

    @@index([accountId], name: "plaid_account_balance_account_id_index")
}

model PlaidTransaction {
    id              String          @id @unique @default(cuid())
    accountId       String
    amount          Decimal
    date            DateTime        @default(now())
    isoCurrencyCode IsoCurrencyCode @default(USD)
    merchantName    String?
    name            String?
    pending         Boolean         @default(false)
    paymentChannel  PaymentChannel  @default(Other)
    addressId       String?

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    Account                             PlaidAccount                          @relation(fields: [accountId], references: [id], onDelete: Cascade)
    Address                             Address?                              @relation(fields: [addressId], references: [id], onDelete: Cascade)
    PlaidTransactionTransactionCategory PlaidTransactionTransactionCategory[]

    @@index([accountId], name: "plaid_transaction_account_id_index")
}

model TransactionCategory {
    id            String                 @id @unique @default(cuid())
    userId        String
    name          String
    createdSource CategoryCreationSource @default(UserCreated)
    status        CategoryStatus         @default(Ignore)

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    User                                User                                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    PlaidTransactionTransactionCategory PlaidTransactionTransactionCategory[]

    @@index([userId], name: "transaction_category_user_id_index")
}

model PlaidTransactionTransactionCategory {
    id                    String @id @unique @default(cuid())
    plaidTransactionId    String
    transactionCategoryId String

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    TransactionId PlaidTransaction    @relation(fields: [plaidTransactionId], references: [id], onDelete: Cascade)
    CategoryId    TransactionCategory @relation(fields: [transactionCategoryId], references: [id], onDelete: Cascade)

    @@index([plaidTransactionId], name: "plaid_transaction_category_plaid_transaction_id_index")
    @@index([transactionCategoryId], name: "plaid_transaction_category_transaction_category_id_index")
}

model Address {
    id         String  @id @unique @default(cuid())
    street1    String
    street2    String?
    city       String?
    postalCode String?
    country    Country @default(USA)
    lat        String?
    lng        String?

    dateCreated DateTime @default(now())
    dateUpdated DateTime @default(now()) @updatedAt

    User             User[]
    PlaidTransaction PlaidTransaction[]
}

// If a full DB reset needs to happen, you will need to delete the stored data types
enum UserStatus {
    Active_Paid
    Suspended
    InActive
    Deleted
    Active_Demo
}

enum Country {
    USA
    Canada
}

enum CategoryCreationSource {
    UserCreated
    PlaidCreated
}

enum CategoryStatus {
    Ignore
    Active
}

enum IsoCurrencyCode {
    USD
}

enum PaymentChannel {
    InStore
    Online
    Other
}

enum AccountTypes {
    Checking
    Savings
    CreditCard
    Loan
    Investment
    Mortgage
    Other
}

enum Language {
    English
}
